buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath 'org.apache.commons:commons-lang3:3.12.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.8.8"
}

// Override groupId and version for this fork's publication
group = "io.github.bluecodesystems"
version = project.VERSION_NAME

android {
    compileSdk androidCompileSdkVersion

    // defaultPublishConfig is obsolete in newer AGP; use default variant publishing

    defaultConfig {
        minSdk androidMinSdkVersion
        targetSdk androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Expose VERSION_NAME to BuildConfig for library consumers
        buildConfigField "String", "VERSION_NAME", "\"${project.VERSION_NAME}\""

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug { }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                // Open JDK17 modules for reflective access used by Robolectric/ReflectionHelpers
                jvmArgs(
                        '--add-opens=java.base/java.lang=ALL-UNNAMED',
                        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
                        '--add-opens=java.base/java.io=ALL-UNNAMED',
                        '--add-opens=java.base/java.util=ALL-UNNAMED',
                        '--add-opens=java.base/java.text=ALL-UNNAMED',
                        '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
                )
            }
        }
    }
    packaging {
        resources {
            excludes += 'META-INF/DEPENDENCIES'
        }
    }

    // Generate BuildConfig for library (AGP 8 disables it by default)
    buildFeatures {
        buildConfig = true
    }

    // Enable publishing of the release variant and attach sources
    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
    namespace "com.vijay.jsonwizard"

    // Enable core library desugaring for Java 8+ APIs used by dependencies
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

repositories {
    // Prefer local flatDir if AARs are provided in the root or module libs
    flatDir {
        dirs rootProject.file('libs'), file("$projectDir/libs"), rootProject.projectDir
    }
    // Ensure JitPack is available for GitHub-hosted libraries
    maven { url 'https://jitpack.io' }
    mavenCentral()
    google()
}

dependencies {
    implementation('io.github.bluecodesystems:opensrp-client-simprints:1.1.0@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
    }
    implementation 'com.github.bmelnychuk:atv:1.2.9'
    // Prefer a local patched Material AAR if provided; remove remote dependency to avoid AAPT issues
    implementation 'com.github.johnkil.print:print:1.3.1'
    implementation 'com.github.rey5137:material:1.3.1'
    // Use the upgraded MaterialEditText fork published under BlueCode
    implementation 'io.github.bluecodesystems:materialedittext:3.1.6'
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$localBroadcastManagerVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation('com.github.ganfra:material-spinner:2.0.0') {
        exclude group: 'com.nineoldandroids', module: 'library'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation('com.google.android.gms:play-services-location:20.0.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation('com.google.android.gms:play-services-vision:20.1.3') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    // Use the upgraded OpenSRP client utils under BlueCode, release version
    implementation 'io.github.bluecodesystems:opensrp-client-utils:0.0.6'
    implementation 'androidx.test:core:1.4.0'

    def easyRulesVersion = '3.4.0'
    implementation "org.jeasy:easy-rules-core:$easyRulesVersion"
    implementation "org.jeasy:easy-rules-mvel:$easyRulesVersion"

    implementation 'joda-time:joda-time:2.10.14'
    implementation 'com.google.code.gson:gson:2.9.0'
    // Pick up any local AARs/JARs (e.g., rdt-capture, rdt-reader) from root/libs, module libs, or root itself
    // Note: Do NOT place CircleProgressbar AAR here if using the local module to avoid duplicates
    implementation fileTree(dir: rootProject.file('libs'), include: ['*.aar', '*.jar'], exclude: ['circleprogressbar*.aar', 'CircleProgressbar*.aar'])
    implementation fileTree(dir: "$projectDir/libs", include: ['*.aar', '*.jar'], exclude: ['circleprogressbar*.aar', 'CircleProgressbar*.aar'])
    implementation fileTree(dir: rootProject.projectDir, include: ['*.aar', '*.jar'], exclude: ['circleprogressbar*.aar', 'CircleProgressbar*.aar'])

    // Use published CircleProgressbar package under BlueCode
    implementation 'io.github.bluecodesystems:circleprogressbar:1.0.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    // CircleProgressbar will be picked up via fileTree above if present locally
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "org.greenrobot:eventbus:$eventBusVersion"
    implementation "androidx.multidex:multidex:$multidexVersion"

    // PowerMock
    def powerMockVersion = '2.0.9'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    implementation('com.github.raihan-mpower:FancyAlertDialog-Android:0.3@aar') {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }

    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:5.6.3'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation("androidx.test.ext:junit:$androidxTestExtJunitVersion") {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoCoreVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("androidx.test:rules:$androidxTestRulesVersion") {
        exclude group: 'com.android.support', module: 'appcompat-v7'

    }

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation('com.squareup:fest-android:1.0.8') { exclude module: 'support-v4' }
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation "org.json:json:20220320"

    // Core library desugaring for Java 8+ APIs on older Android devices
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.required.set(true)
        xml.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))

        html.required.set(true)
        html.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}


// ---- javadoc.jar placeholder for Android ----
// Maven Central requires a javadoc jar. For Android, publish an empty one or use Dokka.
tasks.register("javadocJar", Jar) {
    archiveClassifier.set("javadoc")
    from(layout.projectDirectory.dir("empty-javadoc"))
}

// Maven Central publishing configuration (OSSRH s01)
afterEvaluate {
    publishing {
        publications {
            create("release", MavenPublication) {
                def relComp = components.findByName('release') ?: components.findByName('default')
                if (relComp != null) {
                    from relComp
                } else {
                    artifact("$buildDir/outputs/aar/${project.name}-release.aar")
                }
                artifact tasks.named("javadocJar")
                artifactId = "opensrp-client-native-form-new"

                // For Central bundle releases, strip SNAPSHOT and local module deps from the published POM
                if ((project.findProperty('centralRelease')?.toString()?.toBoolean()) == true) {
                    pom.withXml {
                        def n = asNode()
                        def deps = n.get('dependencies')?.getAt(0)
                        if (deps) {
                            deps.children().removeAll { d ->
                                def aid = d.artifactId?.text()
                                def ver = d.version?.text()
                                ver?.endsWith('SNAPSHOT') || ['circleprogressbar','opensrp-client-simprints','opensrp-client-materialedittext','opensrp-client-utils'].contains(aid)
                            }
                        }
                    }
                }

                pom {
                    name.set("OpenSRP Client Native Form (BlueCode fork)")
                    description.set("BlueCode-maintained fork of the OpenSRP native form library")
                    url.set("https://github.com/BlueCodeSystems/Opensrp-client-native-form-new")
                    licenses {
                        license {
                            name.set("Apache-2.0")
                            url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }
                    developers {
                        developer {
                            id.set("andrel")
                            name.set("Andre Lesa")
                            email.set("engineering@bluecodeltd.org")
                        }
                    }
                    scm {
                        connection.set("scm:git:git://github.com/BlueCodeSystems/Opensrp-client-native-form-new.git")
                        developerConnection.set("scm:git:ssh://github.com:BlueCodeSystems/Opensrp-client-native-form-new.git")
                        url.set("https://github.com/BlueCodeSystems/Opensrp-client-native-form-new")
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = findProperty("ossrhUsername") as String
                    password = findProperty("ossrhPassword") as String
                }
            }
            // Optional local file-based repository to create a Central-compatible bundle
            if ((project.findProperty('centralBundle')?.toString()?.toBoolean()) == true) {
                maven {
                    name = "CentralBundle"
                    url = layout.buildDirectory.dir("central-bundle")
                }
            }
        }
    }
}

afterEvaluate {
    signing {
        // Sign only when not publishing to Maven Local and when keys are provided
        def taskNames = gradle.startParameter.taskNames
        def isMavenLocal = taskNames.any { it.contains('publishToMavenLocal') }
        def skip = project.findProperty('skipSigning')?.toString()?.toBoolean() ?: false
        def useCmd = project.findProperty('useGpgCmd')?.toString()?.toBoolean() ?: false

        required {
            !isMavenLocal && !skip && (
                project.findProperty('signing.keyId') ||
                project.findProperty('signingKey') ||
                useCmd
            )
        }

        if (useCmd) {
            // Use local GnuPG for signing (configure keyName/passphrase in ~/.gradle/gradle.properties)
            useGpgCmd()
        }

        def inMemKey = project.findProperty('signingKey')
        def inMemPass = project.findProperty('signingPassword')
        if (inMemKey && inMemPass) {
            useInMemoryPgpKeys(inMemKey.toString(), inMemPass.toString())
        }

        sign(publishing.publications['release'])
    }
}

// Optionally generate legacy checksums for portal validators
tasks.register("generateCentralBundleChecksums") {
    dependsOn tasks.matching { it.name == 'publishReleasePublicationToCentralBundleRepository' }
    doLast {
        def repoDir = layout.buildDirectory.dir("central-bundle").get().asFile
        if (!repoDir.exists()) return
        repoDir.eachFileRecurse { f ->
            if (f.isFile() && !(f.name.endsWith('.md5') || f.name.endsWith('.sha1') || f.name.endsWith('.asc'))) {
                def md5 = java.security.MessageDigest.getInstance('MD5')
                def sha1 = java.security.MessageDigest.getInstance('SHA-1')
                f.withInputStream { is ->
                    byte[] buf = new byte[8192]
                    int r
                    while ((r = is.read(buf)) > 0) {
                        md5.update(buf, 0, r)
                        sha1.update(buf, 0, r)
                    }
                }
                def toHex = { bytes -> bytes.collect { String.format('%02x', it) }.join() }
                new File(f.parentFile, f.name + '.md5').text = toHex(md5.digest())
                new File(f.parentFile, f.name + '.sha1').text = toHex(sha1.digest())
            }
        }
    }
}

// Zip the local Central bundle repository for upload in the Central Portal UI
tasks.register("zipCentralBundle", Zip) {
    dependsOn tasks.named('generateCentralBundleChecksums')
    // Only include the current coordinates/version, but preserve Maven layout
    def groupPath = project.group.toString().replace('.', '/')
    def artifact = 'opensrp-client-native-form-new'
    def versionDir = "${groupPath}/${artifact}/${project.version}/**"
    from(layout.buildDirectory.dir("central-bundle")) {
        include versionDir
    }
    destinationDirectory = layout.buildDirectory.dir("distributions")
    archiveBaseName.set("central-bundle-opensrp-client-native-form-new")
    archiveVersion.set(project.version)
}

// Helper: print path and files to verify POM exists
tasks.register("printCentralBundleLayout") {
    dependsOn tasks.matching { it.name == 'publishReleasePublicationToCentralBundleRepository' }
    doLast {
        def base = layout.buildDirectory.dir('central-bundle').get().asFile
        def path = new File(base, project.group.toString().replace('.', '/') + "/opensrp-client-native-form-new/" + project.version)
        println "Bundle path: ${path}"
        if (path.exists()) path.eachFile { println it.name } else println "Bundle path not found"
    }
}
